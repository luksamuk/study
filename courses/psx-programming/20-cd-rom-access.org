#+title: CD-ROM Access

* CD-ROM Basics

So far, all the data we've been using is in our executable.

- We need more than 2MB of RAM for executable and assets.
- We need images, textures, 3D mesh data, audio, etc.

The PlayStation allows CD-ROM with up to 650 MB of information.

The CD-ROM has sections and sectors, but it is also divided in areas such as the
lead-in area, table of Content (TOC), and lead-out area.

Hard  drives  are  magnetic  disks,  so   they  use  magnetic  forces  to  store
information (repulsion and attraction are 1's and 0's).

The  CD-ROM, though,  is  optic media,  so  it'll  either have  a  scratch or  a
reflection simbolizing 0's and 1's.

** Rainbow books

The rainbow books are a collection of CD format specifications generally written
and published by standards bodies including the ISO, IEC, and ECMA.

| Kind   | Color   | Year | Description               |
|--------+---------+------+---------------------------|
| CD-DA  | Red     | 1980 | Digital Audio             |
| CD-ROM | Yellow  | 1983 | Read-Only Memory          |
| CD-I   | Green   | 1986 | Interactive               |
| CD-RW  | Orange  | 1990 | Recordable & Rewritable   |
| PCD    | Beige   | 1992 | Photo CD                  |
| VCD    | White   | 1993 | Video CD & Super Video CD |
| E-CD   | Blue    | 1995 | Enhanced                  |
| SA-CD  | Scarlet | 1999 | Super Audio               |
| DD-CD  | Purple  | 2000 | Double Density            |

Source: [[https://en.wikipedia.org/wiki/Rainbow_Books][Wikipedia]]

** Data tracks

#+begin_example
CD
└─ Section 1
   └─ Track 1
      ├─ TEXTURES
      │  └─ GRASS.TIM
      └─ MODELS
         ├─ CUBE.OBJ
         └─ FLOOR.OBJ
#+end_example

- PlayStation CDs are  made up of small data blocks  called *sectors*, each 2048
  bytes long.
- Sectors are grouped in *tracks* (either data or audio), and tracks are grouped
  into *sections*.
- PS1 disks _usually_ contain one single data track.
- Data track information is organized using the standard filesystem *ISO-9660*.

** ISO generation with 32-bit toolchain

For ISO generation on  32-bit contexts (Windows XP preferably), we  use a set of
three tools.

*** ~BUILDCD.EXE~

Generates ~GAME.IMG~ image from ~CDLAYOUT.CTI~. Here is an example of this file:

#+begin_src conf
Define GameName "MyGame"
Define GameDir .
Disc CDROMXA_PSX
  CatalogNumber 0000000000000
  Leadin XA
    Empty 300
    PostGap 150
  EndTrack

  Track XA
    Pause 150
    Volume ISO9660
      SystemArea .\LCNSFILE\LICENSEE.DAT
      PrimaryVolume
        SystemIdentifier "PLAYSTATION"
        VolumeIdentifier [GameName]
        VolumeSetIdentifier [GameName]
        PublisherIdentifier "SCEE"
        DataPreparerIdentifier "SONY"
        ApplicationIdentifier "PLAYSTATION"
        LPath
        OptionalLpath
        MPath
        OptionalMpath

        Hierarchy
          XAFileAttributes  Form1 Audio
          XAVideoAttributes ApplicationSpecific
          XAAudioAttributes ADPCM_C Stereo

          File SYSTEM.CNF
            XAFileAttributes Form1 Data
            Source [GameDir]\SYSTEM.TXT
          EndFile

          File MAIN.EXE
            XAFileAttributes Form1 Data
            Source [GameDir]\MAIN.EXE
          EndFile

          File CUBE.OBJ
            XAFileAttributes Form1 Data
            Source [GameDir]\CUBE.OBJ
          EndFile
        EndHierarchy
      EndPrimaryVolume
    EndVolume
  EndTrack
EndDisk
#+end_src

*** ~PSXLICENSE.EXE~

Bundles the Sony license ~LICENSEE.DAT~ into CD image file.

*** ~STRIPISO.EXE~

Generate ~ISO~ file ~GAME.ISO~ from ~GAME.IMG~.

*** Utility BAT file

We would  probably have  to create  a ~BUILDISO.BAT~  helper file  somewhat like
this:

#+begin_src bat
@ECHO OFF

ECHO Compiling and generating executable...
psymake

ECHO Building IMG file...
BUILDCD -l -iGAME.IMG CDLAYOUT.CTI

ECHO Converting GAME.IMG to GAME.ISO...
STRIPISO S 2352 GAME.IMG GAME.ISO

ECHO Bundling license to game ISO...
PSXLICENSE /eu /i GAME.ISO

ECHO The ISO file was built successfully!
#+end_src

* Generating an ISO on Windows XP

We're  going  to   build  a  new  project  that  we're   going  to  create  from
scratch. It'll  be called ~hellocd~.  I simply copied  everything -- and  I also
created the ~Cube~ and ~Floor~ structs just to be 1:1 with the course project.

Instead of  encoding vertices and  faces on our project  code files, we  want to
have more dynamic stuff. So we're gonna make these data external, as data files.

On Windows XP, let's start by adding our ~CDTOOLS~ to the Path.

** CD-ROM building files

Now, let's add important files to our  directory. The files are:

- ~LCNSFILE/LICENSEE.DAT~: Sony License file. I'm  not going to provide it here,
  I'm sorry. It used to be redistributed along with the original Psy-Q SDK.
- ~assets/model.bin~: Model data file.
- ~SYSTEM.TXT~: CD-ROM configuration variables.
- ~CDLAYOUT.CTI~:

*** ~SYSTEM.TXT~

These are the configurations for booting the CD-ROM.

#+begin_src ini :tangle c/hellocd/SYSTEM.TXT
BOOT=cdrom:\MAIN.EXE;1
TCB=4
EVENT=10
STACK=801FFFF0
#+end_src

*** ~CDLAYOUT.CTI~

These  are the  configurations for  building  the CD-ROM  image, licensing,  and
ISO9660 filesystem configuration.

#+begin_src conf :tangle c/hellocd/CDLAYOUT.CTI
Define GameName "Game"
Define GameDir .

Disc CDROMXA_PSX
  CatalogNumber 0000000000000

  Leadin XA
    Empty 300
    PostGap 150
  EndTrack

  Track XA
    Pause 150
    Volume ISO9660
      SystemArea .\LCNSFILE\LICENSEE.DAT

      PrimaryVolume
        SystemIdentifier "PLAYSTATION"
        VolumeIdentifier [GameName]
        VolumeSetIdentifier [GameName]
        PublisherIdentifier "SCEE"
        DataPreparerIdentifier "SONY"
        ApplicationIdentifier "PLAYSTATION"
        LPath
        OptionalLpath
        MPath
        OptionalMpath

        Hierarchy
          XAFileAttributes  Form1 Audio
          XAVideoAttributes ApplicationSpecific
          XAAudioAttributes ADPCM_C Stereo

          File SYSTEM.CNF
            XAFileAttributes Form1 Data
            Source [GameDir]\SYSTEM.TXT
          EndFile

          File MAIN.EXE
            XAFileAttributes Form1 Data
            Source [GameDir]\MAIN.EXE
          EndFile

          File MODEL.BIN
            XAFileAttributes Form1 Data
            Source [GameDir]\assets\MODEL.BIN
          EndFile
        EndHierarchy
      EndPrimaryVolume
    EndVolume
  EndTrack
EndDisk
#+end_src

** Generating ISO

Provided that the  toolchain binaries are on  your PATH, this is  easy. Just use
the following ~BUILDISO.BAT~ file to build the project and also build the ISO:

#+begin_src bat c/hellocd/BUILDISO.BAT
@ECHO OFF
psymake
BUILDCD -l -iGAME.IMG CDLAYOUT.CTI
STRIPISO S 2352 GAME.IMG GAME.ISO
PSXLICENSE /eu /i GAME.ISO
#+end_src

** The filesystem

On No$psx, go to Window > Filesystem. There,  you should be able to see that the
CD-ROM drive has  a single track (Track 01) of  data, containing three important
files: ~SYSTEM.CNF~, ~MAIN.EXE~ and ~MODEL.BIN~.

There is also going to be a ~License.txt~ file and a ~Logo.tmd~ file.

There  would also  be  a final  dummy  track  (Track AA),  which  is the  CD-ROM
lead-out.

* Generating an ISO on Windows 11

If you're using a modern Windows 11 machine, there is also a way to generate the
ISO.

Make sure you already have the ~assets/model.bin~ and ~SYSTEM.TXT~ files.

You'll also need to download [[https://github.com/Lameguy64/mkpsxiso][~mkpsxiso~]] and install it to your path.

In the  case of  the modern  toolchain, we  are going  to have  a ~CDLAYOUT.xml~
file. It has  basically the same idea as ~CDLAYOUT.CTI~,  except we're declaring
it as a XML format for a different tool that builds our CD.

#+begin_src xml :tangle c/hellocd/CDLAYOUT.xml
<?xml version="1.0" encoding="UTF-8"?>
<iso_project image_name="GAME.ISO" cue_sheet="GAME.CUE" no_xa="0">
  <track type="data">
    <identifiers
	system        = "PLAYSTATION"
	application   = "PLAYSTATION"
	volume        = "MYDISC"
	volume_set    = "GAME"
	publisher     = "ME"
	data_preparer = "MKPSXISO"
	copyright     = "COPYLEFT" />
    <license file="LCNSFILE/LICENSEE.DAT" />
    <directory_tree>
      <file name="SYSTEM.CNF" type="data" source="SYSTEM.TXT" />
      <file name="MAIN.EXE" type="data" source="hellocd.ps-exe" />
      <file name="MODEL.BIN" type="data" source="assets/model.bin" />
    </directory_tree>
  </track>
</iso_project>
#+end_src

Now just run ~mkpsxiso~:

#+begin_src powershell
mkpsxiso CDLAYOUT.xml
#+end_src

** Using the ISO with PCSX-Redux

After you  build the ISO image  for the first time,  think of it as  a read-only
storage for our asset files. You can run the ISO image on PCSX-Redux no problem,
but if you still  want to be able to debug your application  like you were doing
before,  first load  the  image, then  just  press  ~F5~ on  VSCode  to run  the
~.ps-exe~ directly from your machine.

* Generating the project using Docker

I took  the liberty of  creating a Docker  project containing the  toolchain for
building  these. The  Docker image  contains  both the  GCC-MIPSEL compiler  and
mkpsxiso.

The Dockerfile for the toolchain can be found [[https://github.com/luksamuk/psxtoolchain][here]].

#+begin_src bash :tangle c/hellocd/buildiso.sh
#!/bin/bash
exec docker run --rm \
     -v $(pwd):/source \
     -w /source \
     luksamuk/psxtoolchain:latest \
     "make && mkpsxiso -y CDLAYOUT.xml"
#+end_src

* What is SYSTEM.CNF?

* A Function to Read Files from the CD

* CD-ROM Access via BIOS Functions

* Understanding the ~MODEL.BIN~ File

* Dynamically Allocating Buffers

* Heap Initialization

* Interpreting Bytes as Numbers

* Handling Different Order of Bytes

* Reading Vertices & Faces from a File

