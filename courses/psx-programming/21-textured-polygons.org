#+title: Textured Polygons
#+startup: content

* UV Coordinates, TPAGE, and CLUT

When handling textures, we should have a UV coordinate for each vertex.

UV coordinates are  the coordinates (X and  Y) on the texture that  maps to that
particular vertex. The pixels inbetween are then interpolated by the GPU.

- Textures are stored in VRAM alongside the display and the drawing buffers.
- Once texture images  have been loaded into  VRAM, they can be  mapped and used
  with a polygon primitive.
- The traditional way of mapping textures into primitive vertices is by using UV
  coordinates.
- Besides  UV  coordinates,  the  PS1   also  uses  TPAGE  (texture  page)  CLUT
  (color look-up table) information.

For example,  for the  case of ~POLY_FT3~,  we will also  have the  fields ~u0~,
~v0~; ~u1~, ~v1~; ~u2~, ~v2~; ~tpage~; ~clut~.

** TPAGE

TPAGE is a texture page.

- The PS1  addresses VRAM in *pages*.  The VRAM is  divided into a grid  of 16x2
  cells of 64x256 16-bit pixels each.
- The actual texture page coordinates are  (X, Y), but with a 64x256 granularity
  instead.
- When we specify  the UV coordinates of  a primitive, *they will  be offsets of
  the texture page boundary*.
- Setting a  TPAGE serves as an  anchor point at which  textured primitives will
  source texture data from a top-left ~(0, 0)~.

** CLUT

CLUT is a color look-up table.

- The PS1 supports texture color depths of 4, 8, and 16 bits per pixel.
- Because VRAM  addresses pixels in 16-bit  words, 8-bit and 4-bit  textures are
  stored  at  $\tfrac{1}{2}$ and  $\tfrac{1}{4}$  of  the  actual width  of  the
  texture. So imagine that, with the expense  of the amount of stored width, you
  can have  more or less  VRAM usage (the lower  the depth, the  more compressed
  it'll seem when viewing the VRAM).
- 4-bit  and 8-bit  textures  usually  have a  companiont  *Color Look-up  Table
  (CLUT)*.
- A  CLUT is  a  *16x1* or  a  *256x1*  16-bit pixel  image  (that also  resides
  somewhere in the VRAM).
- In simple terms, the CLUT is basically a color palette of the texture.
  
* Installing TIM Tool

So, about  the TIM  Tool, there are  the Programmer's Tools  which work  fine on
Windows XP. I basically just opened my  Windows XP VM and installed it using the
provided ISO.

I also found [[https://github.com/alex-free/TIMedit][a fork of Lameguy64's TIMedit]] that compiles for Linux, and that may
provide an  alternative to the TIM  Tool. It is  the best tool around  for Linux
machines, and for Windows 11.

Here's my script for running it with my PSX toolchain:

#+begin_src bash
#!/bin/bash
exec docker run -it --rm \
       -e DISPLAY=${DISPLAY} \
       -v /tmp/.X11-unix:/tmp/.X11-unix \
       -v ~/.Xauthority:/root/.Xauthority \
       -v $(pwd):/source \
       -w /source \
       --net=host \
       luksamuk/psxtoolchain:latest \
       timedit
#+end_src

* TIM File Format

- Textures are usually handled using the TIM file format.
- We can use the  *TIM TOOL* executable from the Developer  Tools CD to generate
  TIM files based on BMP, JPG, PNG, etc.
- A TIM format is  a simple image format that stores not only  the pixels of the
  image data, but *also* the image X, Y coordinates in VRAM and CLUT data.

** Using TIM Tool

On Framebuffer Options, set the Graphics  Mode to 320x240 NTSC (Framebuffer menu
on TIMedit).

The green area is the display buffer,  the yellow area is the draw buffer (light
green and dark green on TIMedit).

This area is the place where we're not going to upload any texture whatsoever.

First of all, I'm going to copy ~hellocd~ to a ~hellotexture~ directory:

#+begin_src bash
cp -r hellocd hellotexture
cd hellotexture/third_party/
rm -rf nugger psyq-iwyu
git submodule add https://github.com/pcsx-redux/nugget.git
git submodule add https://github.com/johnbaumann/psyq_include_what_you_use.git psyq-iwyu/
#+end_src

** Converting the texture

This isn't part of the course, but  I couldn't help but notice that the textures
were not being imported like TIM Tool.  We couldn't use a 4-bit CLUT, also there
would always be a trailing space of apparently transparent colors.

So here's what I did to convert the provident .bmp brick image to a 16-bit color
image that could behave like I needed.

Here's what you're going to need:

- GIMP, latest version possible (~gimp~ package on Arch Linux);
- [[https://www.gmic.eu/][G'Mic]] (~gmic~ package on Arch Linux);
- G'Mic plugin for GIMP (~gimp-plugin-gmic~ on Arch Linux).

After installation, here's what I did:

1. Open the target image normally on GIMP.

[[file:img/timedit01.png]]

2. Go  to the  menu Filters >  G'Mic-Qt. It'll  open a new  window to  the G'Mic
   plugin. On Available  Filters, find Colors > Colormap.  Select "Adaptive" and
   lower the number of tones to 16.

[[file:img/timedit02.png]]

3. Click "Apply" and  then "Ok". You should be able to view  your image with the
   applied filter on the preview, and after applying, on the main GIMP canvas as
   well. Now  go to GIMP's  File > Export  as... and save  your image as  a .gif
   file (*ensure you remove the interlacing and comments on the next dialogue*).

[[file:img/timedit03.png]]

4. Now go back to TIMedit. Go to File > Import image... and find your .gif image
   normally.

[[file:img/timedit04.png]]

5. When importing, ensure you set the  Target Bpp to 4, and this should generate
   a proper CLUT for our image.

[[file:img/timedit05.png]]

6. You should  now be able to manipulate  and put a proper texture  and its CLUT
   into a single TPAGE.

[[file:img/timedit06.png]]

** Importing the texture

Now,  on ~assets~,  I left  the  ~brick.gif~ image  that we're  going to  import
instead of the original brick texture.

Import  this image  (if using  TIMedit, setting  the target  bpp to  4-bit depth
should be  fine for this  example). Move  it to the  texture page on  the upmost
right,  close   to  the  display   buffer.  The   image  offset  should   be  in
320x0. Position the CLUT at 320x82 like the course video.

On TIM Tool,  go to TIM Options >  Save Modified TIM's (or save  the project and
save the TIM's on TIMedit). Ensure it is named ~bricks.tim~.

Now all we have to do is read, load, and use that texture.

* Read TIM File from the CD

We're  going to  do something  now. For  ~hellotexture~, let's  create an  ~src~
directory and move all ~.c~ and ~.h~ there.

As for my Win11-based Makefile, I did this:

#+begin_src makefile
SRCS = \
third_party/nugget/common/crt0/crt0.s \
$(wildcard src/*.c)
#+end_src

** Editing the CDLAYOUT

Add the texture to the CDLAYOUT:

#+begin_src conf
File BRICKS.TIM
  XAFileAttributes Form1 Data
  Source [GameDir]\assets\BRICK.TIM
EndFile
#+end_src

Or, in modern toolchain...

#+begin_src xml
<file name="BRICKS.TIM" type="data" source="assets/brick.tim" />
#+end_src

** Editing ~main.c~

Let's now tweak our program.

First of  all, instead of using  ~POLY_F4~, let's use ~POLY_FT4~  (flat textured
quad).  A simple  replace on  the whole  file should  suffice. Also  remember to
replace the  variable name to  ~polyft4~. Also  remember to change  the function
~setPolyF4~ to ~setPolyFT4~.

Now, take  all the code for  loading our model and  put it on a  function called
~load_model~, which takes a string as an argument.

We  will  also want  to  create  a function  ~load_texture~  which  will load  a
texture. Let's do some wishful thinking. Add the following on ~setup~:

#+begin_src c
load_texture("\\BRICKS.TIM;1");
#+end_src

So, ~load_texture~ should be similar to ~load_model~ because we would still have
to read the file bytes.

The TIM file  is actually chunks of 32  bits, so we won't have to  read byte per
byte. So we need to have our bytes as a ~u_long~ pointer:

#+begin_src c
void
load_texture(char *filename)
{
    u_long *bytes;
    u_long length;

    bytes = (u_long *)file_read(filename, &length);
    printf("Read %lu bytes from %s (ptr %p)\n", length, filename, bytes);

    // ...rest of the code goes here...

    free(bytes);
}
#+end_src

What we need to  do now is use the function ~OpenTIM~  from ~libgpu.h~, and then
use  ~ReadTIM~ to  read the  file. And  then hold  information on  a ~TIM_IMAGE~
struct.

#+begin_src c
// Among variables...
TIM_IMAGE tim;

// After reading bytes...
OpenTIM(bytes);
ReadTIM(&tim);
#+end_src

Next, we  need to load  the actual image  into our VRAM.  For that, we  send the
destination rect on FrameBuffer  and the pointer to the image  data. Then we use
~DrawSync~ to wait for the image copy process to finish.

#+begin_src c
LoadImage(tim.prect, tim.paddr);
DrawSync(0);
#+end_src

We also need to ask  to copy the CLUT into VRAM -- but only  if we really have a
CLUT to copy. We just  need to test if the 4th bit of  ~tim.mode~ is ~1~ to know
that.

#+begin_src c
if(tim.mode & 0x8) {
    LoadImage(tim.crect, tim.caddr);
    DrawSync(0);
}
#+end_src

So now we have our image and its CLUT on the VRAM! But it looks a bit weird...

[[file:img/hellotexture01.png]]

* Textured Cube Faces

Let's start texturing our cube.

First off, go to  the face rendering routine. on ~setRGB0~,  set a neutral color
(not too  bright, not too dark),  such as ~(128,  128, 128)~. As for  the object
colors, ignore them.

So our texture is 64x64 and we always think of its origin as the top left corner
(Y grows  downwards, as always).  We could use  the function ~setUV4~  here, but
instead, let's set the values directly. Remember that we're doing a zigzag here,
much like a Z:

#+begin_src c
poly->u0 = 0;   poly->v0 = 0;
poly->u1 = 63;  poly->v1 = 0;
poly->u2 = 0;   poly->v2 = 63;
poly->u3 = 63;  poly->v3 = 63;
#+end_src

Now we have to specify the TPAGE and the CLUT for this face.

For that --  and for now -- let's  store the rectangles for the  texture and the
CLUT on some global variables.

#+begin_src c
u_long timmode;  // Pixel mode of the TIM
RECT   timprect; // Rectangle of texture
RECT   timcrect; // Rectangle of texture CLUT
#+end_src

Now  go  back  to  ~load_texture~  and,  before  freeing  the  bytes,  save  the
information:

#+begin_src c
timmode = tim.mode;
timprect = *tim.prect;
timcrect = *tim.crect;
#+end_src

So now, going  back to our drawing  routine, we can use the  ~getTPage~ macro to
calculate the TPAGE for our rect.

~getTPage~ requires four parameters:

- ~tp~: The color depth of our TPAGE. (0: 4 bits, 1: 8 bits, 2: 16 bits);
- ~abr~: Blend operator (for semitransparent primitives. We can pass 0 for now).
- ~x~, ~y~: Coordinates of our texture in VRAM.

We're also going to  be smart and take our color depth directly  from our TIM by
AND'ing it with ~0x3~.

#+begin_src c
poly->tpage = getTPage(timmode & 0x3, 0, timprect.x, timprect.y);
#+end_src

As for the CLUT...  let's use the ~getClut~ macro. In this case,  all we need to
do is pass the coordinates of our CLUT in VRAM.

#+begin_src c
poly->clut = getClut(timcrect.x, timcrect.y);
#+end_src

Now everything seems nice!...

[[file:img/hellotexture02.png]]

...but  if you  actually see  this running,  you'll notice  that the  texture is
wobbling.

Texture wobbling  and polygon  jittering are  two very  common artifacts  on the
PlayStation.

* Wobbly Textures

So,  when we  have a  perspective  projection, we  can  map our  texture to  our
resulting (2D) triangles  in two ways: with *affine* texture  mapping, or with a
*perspective-correct* texture mapping.

The *affine* mapping  creates a sort of distortion, almost  like a "zigzag"-line
pattern  at the  center  of a  quad,  showing almost  explicitly  where the  two
triangles meet. That's not what we would expect in a perspective-correct texture
mapping.

As said  earlier, the PS1 has  a 2D GPU, that  doesn't know the concept  of a 3D
world space; it only knows of X and Y coordinates. So a way of thinking is that,
when we see a  quad with one of its parts at a  bigger depth than other (further
away), the GPU only  "sees" two flat 2D triangles on the screen  that need to be
filled with pixels sampled from a flat texture -- in other words, the GPU has no
idea  of  depth.  This is  what  an  *affine*  mapping  is --  a  simple  linear
interpolation for sampling texture parts, with no accounting of depth.

To solve  this problem, we  would have  to use the  original Z component  of our
vertices,  or  more exactly,  $\dfrac{1}{z}$.  But  we  can't  solve it  on  the
PlayStation because  this relates to how  the GPU works, and  it's not something
that  can  be solved  via  software,  since we  can't  retroactively  use the  Z
coordinate for our vertices again, since they'll be 2D by then:

#+begin_src c
gte_ldv0(&object.vertices[object.faces[i + 0]]);
gte_ldv1(&object.vertices[object.faces[i + 1]]);
gte_ldv2(&object.vertices[object.faces[i + 2]]);
gte_rtpt();
gte_nclip();
gte_stopz(&nclip);
if(nclip <= 0) continue;
// At this point, we don't have access to Z anymore!
// Our points are now composed of X and Y coordinates only.
// Without a properly calculated Z here, we can't fix X and Y.
gte_stsxy0(&poly->x0);
gte_ldv0(&object.vertices[object.faces[i + 3]]);
gte_rtps();
// ...same problem here!
gte_stsxy3(&poly->x1, &poly->x2, &poly->x3);
#+end_src

In theory,  we could  reduce the  wobbliness by using  smaller triangles  on our
scene. Then  they would be much  less visible. So we  could tesselate (subdivide
our primitives into smaller ones) to make our games look good.

* Polygon Jitter

The other  common artifact on PlayStation  is polygon jittering, which  does not
relate to textures. It is related to how the GPU rasterizes primitives.

- Another  very popular  graphical  artifact of  PlayStation  games is  *polygon
  jittering*.
- The PlayStation GPU does *not* have *sub-pixel rasterization*.
- Screen coordinates  are rounded up or  down to *integer* values  and *snap* to
  the pixel grid.

Besides  not  having  an  FPU,   the  PlayStation  GTE  outputs  integer  screen
coordinates to the GPU.

* TPAGE Limitations and Techniques

- While the width of  4-bit and 8-bit textures on VRAM varies  from the width of
  the actual  image, the  UV coordinates do  *not* need to  be adjusted  and are
  always the absolute value  in pixels, as long as we  specify the correct color
  depth in  the texture page. That's  why we still used  coordinates ranged 0-63
  even though our texture had a 4-bit color depth.
- Since UV  coordinates are  of type  ~u_char~ (1 byte  / 8  bits), we  can only
  specify coordinates on  range 0-255, so it is *not  possible* to draw textures
  larger than  256x256, regardless of  color depth. To  do that, we  *must* draw
  multiple primitives until they fill the area of the larger image.

* Dev Tools CD Samples

The developer tools CD is full of cool samples.

Go look at them.

There is a folder ~C:\PS\psx\sample~. There are numerous interesting samples for
things that we didn't look into here (such as lighting, etc).

Seriously.  Go look  at it.  You'll need  the toolchain  properly configured  on
Windows XP to do so, but that can be easily arranged.

