#+title: Warm Up Exercises

I'm not  going to  introduce the problems  for each exercise  here, I  think I'm
already writing too  much stuff from the  course and I don't wanna  be an a-hole
with the creator. Either  read the code and figure out what it  is doing, or buy
the course, because IT IS. VERY. GOOD.

* Some Warm Up Exercises

** Exercise 1

#+begin_src asm :tangle exercises/src/exercise1.s
	.psx
	.create "exercise1.bin", 0x80010000
	.org 0x80010000
Main:
	li	$t0, 0x1
	li	$t1, 0x100
	li	$t2, 0x11
End:
	.close
#+end_src

** Exercise 2

#+begin_src asm :tangle exercises/src/exercise2.s
	.psx
	.create "exercise2.bin", 0x80010000
	.org 0x80010000
Main:
	li	$t0, 0x1
	move	$t1, $zero
Loop:
	add	$t1, $t0
	addi	$t0, 0x1
	ble	$t0, 0xa, Loop
	nop
End:
	.close
#+end_src

** Exercise 3

#+begin_src asm :tangle exercises/src/exercise3.s
	.psx
	.create "exercise3.bin", 0x80010000
	.org 0x80010000
Main:
	move	$t2, $zero	; res
	li	$t0, 0x1b	; num
	li	$t1, 0x3	; den
Loop:
	subu	$t0, $t1
	addiu	$t2, 0x1
	bge	$t0, $t1, Loop
	nop
End:
	.close
#+end_src

** Trivia

- Sometimes, instead of using ~li $t1, 0x0~, people may use ~move $t1, $zero~.

* Register shorthand / register forwarding

Some registers have a shorthand.

#+begin_src asm
	addiu	$t2, $t2, 1	; Normal form
	addiu	$t2, 1		; Shorthand form
#+end_src

In this case, the  shorthand happens if the manipulated register  is the same as
the destination. In these cases, the destination can be omitted.

This also goes back to pseudo-instructions. For example, the following codes are
equivalent,  or even  better, ~li~  is a  pseudo-instruction that  translates to
~ori~ as follows:

#+begin_src asm
	li	$s0, 10		; pseudo-instruction
	ori	$t0, $zero, 10	; actual instruction
#+end_src

The translation may  not be the same  since it might depend on  context, but you
get the idea --  it is an OR operation between ~$zero~  and the immediate value,
which in turn is stored into the register ~$t0~.

Why this happens?  Well, that's because we're  in a RISC architecture.  If it is
possible to  have less instructions, or  even instructions based on  other ones,
then that's what the chip and assembler designers will strive for.

* Factorial exercise

The following  C code for  factorial is provided and  we should translate  it to
MIPS assembly:

#+begin_src C
#include <stdio.h>

int main() {
    int num;  // $t0
    int i;    // $t1
    int j;    // $t2
    int temp; // $t3
    int sum;  // $t4

    num = 5;  // Let's compute 5!

    temp = 1;
    sum = 1;
    i = 1;
    while (i <= num) {
        sum = 0;
        j = 0;
        while (j < i) {
            sum += temp;
            j++;
        }
        temp = sum;
        i++;
    }
    printf("fac(%d) = %d\n", num, sum);
    return 0;
}
#+end_src

** Solution

#+begin_src asm :tangle exercises/src/factorial.s
	.psx
	.create "factorial.bin", 0x80010000
	.org 0x80010000
Main:
	li	$t0, 0x5	; num
	li	$t3, 0x1	; temp
	li	$t4, 0x1	; sum
	li	$t1, 0x1	; i
L1:	bgt	$t1, $t0, End
	nop
	move	$t4, $zero
	move	$t2, $zero	; j
	nop
L2:	bge	$t2, $t1, EndL2
	nop
	addu	$t4, $t3
	addiu	$t2, 0x1
	j	L2
	nop
EndL2:
	move	$t3, $t4
	addiu	$t1, 0x1
	j	L1
	nop
End:
	move	$v0, $t4
	.close
#+end_src

*** A small personal note on this exercise...

A single missing ~nop~ instruction after the ~bge~ instruction on label ~L2~ was
enough to  change the result from  120 to 720. This  is insane!!! We need  to be
very  careful  with  branching.  And  this all  happens  because  the  processor
nonetheless was always executing the ~addu~ between ~$t4~ and ~$t3~.
