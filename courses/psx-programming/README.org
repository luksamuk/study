#+title: PS1 Programming with MIPS Assembly & C - Course Notes

These are my notes for the PlayStation development course.

* Chapters

1. [[./01-hardware.org][Hardware]]
2. [[./02-mips-assembly.org][MIPS Assembly]]
3. [[./03-mips-pipeline.org][MIPS Pipeline]]
4. [[04-warmup-exercises.org][Warm-up Exercises]]
5. [[./05-subroutines-negative-numbers.org][Subroutines and Negative Numbers]]
6. [[./06-cisc-vs-risc.org][CISC vs. RISC]]
7. [[07-graphics-system.org][Graphics System]]
   - [[./hello-gpu.org][Hello GPU]]
8. [[./08-rendering-polygons.org][Rendering Polygons]]
9. [[./09-memory-alignment.org][Memory Alignment]]
10. [[./10-copying-data-to-vram.org][Copying Data to VRAM]]
11. [[./11-moving-from-asm-to-c.org][Moving from Assembly to C]]
    
* Extra documents

- [[file:MIPSCheatSheet.pdf][MIPS Assembly Cheat Sheet]]
- [[file:MIPS-Instruction-Set-Reference.pdf][MIPS Instruction Set Reference]]
- [[file:Sony-PlayStation-Hardware.pdf][Sony PlayStation Developer Reference]]
- [[file:psx-spx.txt][no$psx PSXSPX PlayStation Specifications]] (txt format)
  - [[https://problemkaputt.de/psx-spx.htm][web link]]
  - [[https://psx-spx.consoledev.net/graphicsprocessingunitgpu/][wiki-style web link]] (easier to navigate)

* Compiling ASM exercises

Notice that  compilation requires  the [[file:bin2exe.py][bin2exe.py]] script,  which builds  the PSX
file header.

#+begin_src bash
cd exercises
make <name>.psexe
#+end_src

Replace  ~<name>~ with  the name  of  one of  the exercise  assembly files.  For
example,  if you  want to  build  the file  ~exercises/src/fillmemw.s~, use  the
command ~make fillmemw.psexe~.

Building ASM exercises also create ~.bin~  artifacts. Use ~make clean~ to remove
them, and use ~make purge~ to remove all final ~.psexe~ files.

* Compiling C exercises

First of all,  it's important to say  that the course tells you  to use Windows,
but I'm a rebel, so I made it work on Arch Linux.

Most of the inspiration comes from the Nugget  + PsyQ libs, and a nice amount of
Hello World samples can be found [[https://github.com/ABelliqueux/nolibgs_hello_worlds][here]].

Start by installing the GNU C Compiler for MIPS.

#+begin_src bash
# On Ubuntu
sudo apt install gcc-mipsel-linux-gnu g++-mipsel-linux-gnu binutils-mipsel-linux-gnu

# On Arch Linux (it WILL build from source and it take a LOOOOONG time)
yay -S cross-mipsel-linux-gnu-binutils cross-mipsel-linux-gnu-gcc
#+end_src

Now download the Psy-Q SDK:

#+begin_src bash
cd dev/
wget http://psx.arthus.net/sdk/Psy-Q/psyq-4.7-converted-full.7z
7z x psyq-4.7-converted-full.7z -o./psyq
#+end_src

Finally, if  you haven't cloned  this repository  with submodules, it's  time to
fetch them (and fetch the Nugget repository):

#+begin_src bash
cd /repository/root/dir
git submodule update --init
#+end_src

Everything in  the ~dev/~ directory  relates to C  development, so you  can just
~cd~  into it  and use  ~make~  to build  the  projects on  the directory.  Each
directory has a Makefile for you to build it.

#+begin_src bash
cd dev/helloworld/
make
#+end_src

The result is always an ~.elf~ file, and a proper ~.ps-exe~ file.
