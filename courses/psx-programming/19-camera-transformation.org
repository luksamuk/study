#+title: Camera Transformation
#+startup: content

* Camera space

So far, our eye point for the camera has been the origin ~(0, 0, 0)~.

** Camera Object

We start by defining the conceptual camera object on the scene.

#+begin_src c
typedef struct {
    VECTOR  position;
    SVECTOR rotation;
    MATRIX  lookat;
} Camera;
#+end_src

** Camera Transformation

- We will  _not_ look at  the entire derivation  of the formulas  here. Instead,
  we'll focus on the *intuition* behind the transformation.

The camera transformation transforms all the vertices on the scene, so that they
get rotated, translated  and converted into a new coordinate  system, where this
new origin is the eye point of the  camera, looking at a positive Z axis (in our
case).

- The  *Camera  Transformation*  is  a  stage  of  the  graphics  pipeline  that
  transforms *all*  the vertices  of our  scene, multiplying  them by  the _view
  matrix_ and  converting them to  a *new  coordinate system* whose  *origin* is
  the camera *eye* point looking at the positive z-axis.

*** Camera space on the rendering pipeline

So, where does this camera transformation sit on the pipeline? Well...

1. Local Space
   - Gets transformed by World Matrix...
2. World Space
   - Gets transformed by View Matrix...
3. Camera Space
4. Perspective Projection
5. Clip Space
6. Screen Space & Rasterization

** Camera models

There are different camera models which we can use.

- FPS camera model: There are rotations (pitch, roll, yaw).
- Look-at  camera model:  The camera  is  at a  certain position  in the  world,
  looking at a target.

We're going to  use a look-at camera model,  and for that, we need  to perform a
look-at transformation, which involves a matrix.

* The Look-At Transformation

- The most popular way of creating a view matrix is by using a camera ~LookAt()~
  function.
- This function returns  a matrix that can  be used to multiply  the vertices to
  convert them to camera/view space.
  - Like we just saw, this is called a *view matrix*).
- In order to set  the camera position and orientation, all we  really need is a
  point to set the camera position in  space (the *eye* point), and a point that
  defines where the camera is looking at (the *target* point).
- The camera's ~LookAt~ transformation is responsible for giving us back a *view
  matrix* ($M _ {\text{view}}$).
- It consists of _two_ transformations:
  1. *Translating* the whole scene inversely from the camera eye position to the
     origin (matrix $M _ {T}$);
  2. *Rotating*  the scene with  the *reverse* orientation (matrix  $M _ {R}$), so
     the camera is positioned at the origin and facing the positive z-axis.

$$\\
M _ {\text{view}} = M _ {R} \cdot M _ {T} =
\begin{bmatrix}
r _ {11} & r _ {12} & r _ {13} & 0 \\
r _ {21} & r _ {22} & r _ {23} & 0 \\
r _ {31} & r _ {32} & r _ {33} & 0 \\
0 & 0 & 0 & 1
\end{bmatrix}\cdot
\begin{bmatrix}
1 & 0 & 0 & t _ {x} \\
0 & 1 & 0 & t _ {y} \\
0 & 0 & 1 & t _ {z} \\
0 & 0 & 0 & 1
\end{bmatrix}$$

Let's look at translation and rotation individually...

** Translation

Translation is easy. All we need to  do is inversely move the camera position to
the origin.  We just  replace the  translation column of  matrix $M _ {T}$  by the
negated *eye* position.

$$\\
M _ {T} =
\begin{bmatrix}
1 & 0 & 0 & -\text{eye} _ {x} \\
0 & 1 & 0 & -\text{eye} _ {y} \\
0 & 0 & 1 & -\text{eye} _ {z} \\
0 & 0 & 0 & 1
\end{bmatrix}$$

** Rotation

For the _rotation_ part, we must compute the *forward* (z), *right* (x) and *up*
(y) vectors (these vectors  are relative to the camera eye,  of course. Use your
left hand toe, index and middle fingers to create these vectors).

If we have these orthogonal  vectors (orthogonal, since they're perpendicular to
each other), computing a matrix that encodes them is quite easy:

$$\\
\begin{bmatrix}
\text{right} _ {x} & \text{up} _ {x} & \text{forward} _ {x} & 0 \\
\text{right} _ {y} & \text{up} _ {y} & \text{forward} _ {y} & 0 \\
\text{right} _ {z} & \text{up} _ {z} & \text{forward} _ {z} & 0 \\
0 & 0 & 0 & 1
\end{bmatrix}$$

*However!!!   This  rotation matrix  must  be  _inverted_!!!*  (so we  take  our
original matrix and elevate it to the power of -1):

$$\\
M _ {R} =
\begin{bmatrix}
\text{right} _ {x} & \text{up} _ {x} & \text{forward} _ {x} & 0 \\
\text{right} _ {y} & \text{up} _ {y} & \text{forward} _ {y} & 0 \\
\text{right} _ {z} & \text{up} _ {z} & \text{forward} _ {z} & 0 \\
0 & 0 & 0 & 1
\end{bmatrix} ^ {-1}$$

Inverting  a   matrix  is  a  complicated   thing  to  do  by   hand,  and  even
computationally it can be quite expensive.  But... *Good news!* We don't have to
compute  the inverse  matrix $M  _ {R}$  the hard  way, because  this matrix  is
_orthogonal_  (where   each  *column*   has  length   *1.0*  and   are  mutually
*perpendicular*).

In other words,  the vectors are unitary (because they  are normalized), and are
perpendicular among each other. So it  is an orthogonal matrix. This means that,
*to invert an orthogonal matrix, all we have to do is transpose said matrix*.

- To  *invert* any  orthogonal matrix,  all  we need  to do  is *transpose*  the
  matrix.

$$\\
M _ {R} =
\begin{bmatrix}
\text{right} _ {x} & \text{up} _ {x} & \text{forward} _ {x} & 0 \\
\text{right} _ {y} & \text{up} _ {y} & \text{forward} _ {y} & 0 \\
\text{right} _ {z} & \text{up} _ {z} & \text{forward} _ {z} & 0 \\
0 & 0 & 0 & 1
\end{bmatrix} ^ {T} =
\begin{bmatrix}
\text{right} _ {x} & \text{right} _ {y} & \text{right} _ {z} & 0 \\
\text{up} _ {x} & \text{up} _ {y} & \text{up} _ {z} & 0 \\
\text{forward} _ {x} & \text{forward} _ {y} & \text{forward} _ {z} & 0 \\
0 & 0 & 0 & 1
\end{bmatrix}$$

** Final view matrix

$$M _ {\text{view}} = M _ {R} \cdot M _ {T}$$

$$\\
M _ {\text{view}} = 
\begin{bmatrix}
\text{right} _ {x} & \text{right} _ {y} & \text{right} _ {z} & 0 \\
\text{up} _ {x} & \text{up} _ {y} & \text{up} _ {z} & 0 \\
\text{forward} _ {x} & \text{forward} _ {y} & \text{forward} _ {z} & 0 \\
0 & 0 & 0 & 1
\end{bmatrix} \cdot
\begin{bmatrix}
1 & 0 & 0 & -\text{eye} _ {x} \\
0 & 1 & 0 & -\text{eye} _ {y} \\
0 & 0 & 1 & -\text{eye} _ {z} \\
0 & 0 & 0 & 1
\end{bmatrix}$$

$$\\
M _ {\text{view}} =
\begin{bmatrix}
\text{right} _ {x}   & \text{right} _ {y}   & \text{right} _ {z}   & (-\text{right} _ {x} \text{eye} _ {x} - \text{right} _ {y} \text{eye} _ {y} - \text{right} _ {z} \text{eye} _ {z}) \\
\text{up} _ {x}      & \text{up} _ {y}      & \text{up} _ {z}      & (-\text{up} _ {x} \text{eye} _ {x} - \text{up} _ {y} \text{eye} _ {y} - \text{up} _ {z} \text{eye} _ {z}) \\
\text{forward} _ {x} & \text{forward} _ {y} & \text{forward} _ {z} & (-\text{forward} _ {x} \text{eye} _ {x} - \text{forward} _ {y} \text{eye} _ {y} - \text{forward} _ {z} \text{eye} _ {z})
\end{bmatrix}$$


