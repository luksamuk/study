#+title: GTE Inline Instructions
#+startup: content

* GTE Register Set

- [[file:Sony-Slides-GTE.pdf][GTE & Advanced Graphics]] (slide)

** Data registers

The GTE has 32 general/data registers:

- Registers  to store  data of  three 3D  vectors: ~VX0~,  ~VY0~, ~VZ0~;  ~VX1~,
  ~VY1~, ~VZ1~; ~VX2~, ~VY2~, ~VZ2~.
- Registers to store colors: ~R~, ~G~, ~B~, ~CD~.
- Registers to store intermediate values: ~IR0~, ~IR1~, ~IR2~, ~IR3~.
- Registers  to store  screen coordinates:  ~SX0~, ~SY0~;  ~SX1~, ~SY1~;  ~SX2~,
  ~SY2~.
- Register to store ordering table Z order: ~OTZ~.
- Registers to store output values: ~MAC0~, ~MAC1~, ~MAC2~, ~MAC3~...

** Control registers

The GTE also has 32 control registers  (setup registers that tell the GTE how to
behave):

- World transform registers:
  - Rotation 3x3 matrix registers: ~R11~, ~R12~, ~R13~; ~R21~, ~R22~, ~R23~; ~R31~, ~R32~, ~R33~.
  - Translation 3D vector registers: ~TRX~, ~TRY~, ~TRZ~.
- Lighting registers:
  - Lighting direction 3x3 matrix registers:  ~L11~, ~L12~, ~L13~; ~L21~, ~L22~,
    ~L23~; ~L31~, ~L32~, ~L33~.
  - Lighting  color 3x3  matrix registers:  ~LR1~, ~LR2~,  ~LR3~; ~LG1~,  ~LG2~,
    ~LG3~; ~LB1~, ~LB2~, ~LB3~.
  - Background color vector: ~RBK~, ~GBK~, ~BBK~.
- Average Z registers: ~ZSF3~, ~ZSF4~.
- ...

** Instruction set

Since the GTE is a coprocessor inside the CPU block, it is *not* memory mapped.

So  the   GTE  has   a  special   instruction  set,   that  differs   from  MIPS
instructions. These instructions are especially for CP2 (GTE).

Here is an example implementation of ~RotTransPers3~.

#+begin_src c
// Function prototype, for analysis purposes:
long RotTransPers3(
    SVECTOR *v0, // $a0
    SVECTOR *v1, // $a1
    SVECTOR *v2, // $a2
    long *sxy0,  // $a3
    long *sxy1,  // 16($sp)
    long *sxy2,  // 20($sp)
    long *p,     // 24($sp)
    long *flag); // 28($sp)
#+end_src

Remember also the [[https://en.wikipedia.org/wiki/MIPS_architecture#Calling_conventions][MIPS O32 calling convention]].

#+begin_src asm
RotTransPers3:
	;; input local vectors
	lwc2	C2_VXY0, ($a0)
	lwc2	C2_VZ0, 4($a0)
	lwc2	C2_VXY1, ($a1)
	lwc2	C2_VZ1, 4($a1)
	lwc2	C2_VXY2, ($a2)
	lwc2	C2_VZ2, 4($a2)
	nop
	;; rotate, translate, perspective
	RTPT
	lw	$t0, 16($sp)
	lw	$t1, 20($sp)
	lw	$t2, 24($sp)
	lw	$t3, 28($sp)
	;; output screen coordinates
	swc2	C2_SXY0, ($a3)
	swc2	C2_SXY1, ($t0)
	swc2	C2_SXY2, ($t1)
	swc2	C2_IR0, ($t2)
	cfc2	$v1, C2_FLAG0
	mfc2	$v0, C2_SZ2
	sw	$v1, ($t3)
	j	$ra
	sra	$v0, $v0, 2
#+end_src

Here we have an extended instruction set that does things for the coprocessor 2:

- ~lwc2~: load  word  into  coprocessor 2
- ~swc2~: store word  from coprocessor 2
- ~RTPT~: Rotate, translate, perspective, for three vertices
- ~cfc2~: move word from GTE control register into CPU register
- ~mfc2~: move word from GTE data register into CPU register

* Inline GTE Instructions

- [[file:Sony-PlayStation-GTEInlineReference.pdf][GTE Inline Programming Reference]]



* RTPT vs. RTPS

